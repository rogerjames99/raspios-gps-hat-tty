#!/usr/bin/env python

from gps import *
import time
import gpxpy
import gpxpy.gpx
from datetime import datetime
import logging
from systemd.journal import JournalHandler

logging.basicConfig(format='%(asctime)s %(message)s')
log = logging.getLogger("gps-logger")
log.propagate = False
log.addHandler(JournalHandler())
log.setLevel(logging.INFO)

TIME_INTERVAL_SECONDS = 30.0
MAX_SEGMENT_TIME = 900.0
running = True

def getPositionData(report):
    print(report)
    mode = report['mode']
    if mode < 2:
        return
    log.debug("Mode = %d", mode)

    latitude = float(report['lat'])
    longitude = float(report['lon'])
    log.debug("Latitude %f Longitude %f", latitude, longitude)
    if mode == 3:
        elevation = float(report['altHAE'])
        log.debug("Elevation %f", elevation)
        #gpx_segment.points.append(gpxpy.gpx.GPXTrackPoint(latitude, longitude, elevation))
    #else:
        #gpx_segment.points.append(gpxpy.gpx.GPXTrackPoint(latitude, longitude))
    # If the number of points saved multiplied by the time interval is greater
    # than the maximum segment size then save the current segment and reset it.
    #log.debug("Current points %d", len(gpx_segment.points))
    #if (len(gpx_segment.points) * TIME_INTERVAL_SECONDS) > MAX_SEGMENT_TIME:
        #saveCurrentSegment()


session = gps()
session.stream(WATCH_ENABLE|WATCH_NEWSTYLE)
log.info("Gps logger started")

for report in session:
    cls =  report['class']
    if  cls != 'TPV':
        log.debug("Ditching %s", cls)
        continue
    getPositionData(report)
    time.sleep(TIME_INTERVAL_SECONDS)
