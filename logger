#!/usr/bin/env python

from gps import *
import time
import gpxpy
import gpxpy.gpx
from datetime import datetime, timedelta
import logging
from systemd.journal import JournalHandler

logging.basicConfig(format='%(asctime)s %(message)s')
log = logging.getLogger("gps-logger")
log.propagate = False
log.addHandler(JournalHandler())
log.setLevel(logging.DEBUG)

MAX_SEGMENT_TIME = timedelta(seconds=900)
running = True

last_time = datetime.now()

def saveCurrentSegment(segfile):
    log.debug("Saving segment raw points %d", gpx_segment.get_points_no())
    gpx.reduce_points(min_distance=2.5)
    log.debug("Saving segment reduced points %d", gpx_segment.get_points_no())
    with open(segfile, "w") as f:
        f.write(gpx.to_xml())
    gpx_segment.points.clear()
    log.debug("Segment file %s saved", segfile)

# Process TPV
def getPositionData(report):
    print(report)

    mode = report['mode']
    if mode < 2:
        return
    log.debug("Mode = %d", mode)

    point = gpxpy.gpx.GPXTrackPoint()
    point.latitude = float(report['lat'])
    point.longitude = float(report['lon'])
    if mode == 3:
        point.elevation = float(report['altHAE'])

    log.debug("Point %s", point)
    gpx_segment.points.append(point)
    # If the number of points saved multiplied by the time interval is greater
    # than the maximum segment size then save the current segment and reset it.
    log.debug("Current points %d", len(gpx_segment.points))
    current_time = datetime.now()
    if current_time - last_time >= MAX_SEGMENT_TIME:
        segfile = current_time.strftime("%Y-%m-%dT%H:%M:%S.gpx")
        last_time = current_time
        saveCurrentSegment(segfile)

log.info("Gps logger started")

gpx = gpxpy.gpx.GPX()
gpx_track = gpxpy.gpx.GPXTrack()
gpx.tracks.append(gpx_track)
gpx_segment = gpxpy.gpx.GPXTrackSegment()
gpx_track.segments.append(gpx_segment)

session = gps(mode=WATCH_ENABLE)

try:
    while True:
        report = session.next()
        report_class = report['class']
        if report_class == 'TPV':
            # Got a TPV
            getPositionData(report)
        elif report_class == "SKY":
            # Update the DOP data
            print(report)

except StopIteration:
    pass

except KeyboardInterrupt:
    saveCurrentSegment()

log.info("GPS logger terminated")
