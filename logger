#!/usr/bin/env python

from gps import *
import time
import gpxpy
import gpxpy.gpx
from datetime import datetime
import logging
from systemd.journal import JournalHandler

logging.basicConfig(format='%(asctime)s %(message)s')
log = logging.getLogger("gps-logger")
log.propagate = False
log.addHandler(JournalHandler())
log.setLevel(logging.DEBUG)

TIME_INTERVAL_SECONDS = 30.0
MAX_SEGMENT_TIME = 900.0
running = True

def saveCurrentSegment():
    log.debug("Saving segment raw points %d", gpx_segment.get_points_no())
    gpx.reduce_points(min_distance=2.5)
    log.debug("Saving segment reduced points %d", gpx_segment.get_points_no())
    with open(datetime.now().strftime("%Y-%m-%dT%H:%M:%S.gpx"), "w") as f:
        f.write(gpx.to_xml())
    gpx_segment.points.clear()
    log.debug("Segment saved")

def getPositionData(report):
    print(report)
    mode = report['mode']
    if mode < 2:
        return
    log.debug("Mode = %d", mode)

    point = gpxpy.gpx.GPXTrackPoint()
    point.latitude = float(report['lat'])
    point.longitude = float(report['lon'])
    if mode == 3:
        point.elevation = float(report['altHAE'])

    log.debug("Point %s", point)
    gpx_segment.points.append(point)
    # If the number of points saved multiplied by the time interval is greater
    # than the maximum segment size then save the current segment and reset it.
    log.debug("Current points %d", len(gpx_segment.points))
    if (len(gpx_segment.points) * TIME_INTERVAL_SECONDS) > MAX_SEGMENT_TIME:
        saveCurrentSegment()


log.info("Gps logger started")

gpx = gpxpy.gpx.GPX()
gpx_track = gpxpy.gpx.GPXTrack()
gpx.tracks.append(gpx_track)
gpx_segment = gpxpy.gpx.GPXTrackSegment()
gpx_track.segments.append(gpx_segment)

#session = gps(mode=WATCH_ENABLE,host="192.168.10.22")
session = gps(mode=WATCH_ENABLE)
try:
    while True:
        report = session.next()
        report_class = report['class']
        if report_class == 'TPV':
            # Got a TPV
            getPositionData(report)
            # Release the session
            #session.close()
            #time.sleep(TIME_INTERVAL_SECONDS)
            #session = gps(mode=WATCH_ENABLE,host="192.168.10.22")
            #session = gps(mode=WATCH_ENABLE)
        elif report_class == "SKY":
            # Update the DOP data
            print(report)
except StopIteration:
    pass
except KeyboardInterrupt:
    saveCurrentSegment()
log.info("GPS logger terminated")
